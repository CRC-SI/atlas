define([
  'atlas/util/Class',
  'atlas/util/DeveloperError'
], function (Class, DeveloperError) {

  /**
   * Define the FooStore constructor as type atlas.core.FooStore
   * @typedef atlas.core.FooStore
   * @ignore
   */
  var FooStore;

  /**
   * @classdesc The FooStore is a class to encapsulate storing and retrieving arbitrary
   * objects using unique IDs. The unique IDs need to be generated by the objects being
   * stored.
   * @param {String} id - The name of the getter function for the objects ID. Defaults
   * to <code>getId</code>.
   * @class atlas.core.FooStore
   */
  FooStore = Class.extend( /** @lends atlas.core.FooStore# */ {

    /**
     * The getter function for the ID of the stored objects.
     * @type {String}
     */
    _getter: null,

    /**
     * Count of items in the store.
     * @type {number}
     */
    _count: 0,

    /**
     * The objects stored in the FooStore.
     * @type {Object.<String, Object>}
     * @private
     */
    _foos: null,

    _init: function (getter) {
      this._foos = {};
      this._getter = getter || 'getId';
    },

    // -------------------------------------------------
    // GETTERS AND SETTERS
    // -------------------------------------------------

    /**
     * @returns {number} The number of items in the store.
     */
    getCount: function () {
      return this._count;
    },

    // -------------------------------------------------
    // ADDING AND REMOVING
    // -------------------------------------------------

    /**
     * Add an object to the store.
     * @param {Object} obj - The object to add.
     */
    add: function (obj) {
      if (!obj[this._getter]) {
        throw new DeveloperError('Tried to add object without an ID getter to the store.');
      }
      var id = obj[this._getter].apply(obj);
      this._foos[id] = obj;
      this._count++;
    },

    /**
     * Adds an array of objects to the store.
     * @param {Array.<Object>} objs - The array of objects to add.
     */
    addArray: function (objs) {
      objs.forEach(function (obj) {
        this.add(obj);
      }, this);
    },

    /**
     * Remove an object from the store.
     * @param {String} id - The ID of the object to remove.
     * @returns {Object} The removed object.
     */
    remove: function (id) {
      var obj = this._foos[id];
      delete this._foos[id];
      this._count--;
      return obj;
    },

    /**
     * @param {String} id - The ID of the object to retrieve.
     * @returns {Object?} The object with the given ID.
     */
    get: function (id) {
      return this._foos[id];
    },

    /**
     * Removes all items from the store.
     */
    purge: function () {
      this._foos = {};
    },

    // -------------------------------------------------
    // FOO MODIFICATION
    // -------------------------------------------------

    /**
     * Maps a given function to every foo in the store.
     * @param {String} f - Name of the function to apply.
     * @param {Array} [args] - An array of arguments for the function.
     */
    map: function (f, args) {
      Object.keys(this._foos).forEach(function (id) {
        var foo = this.get(id);
        foo[f] && foo[f].apply(foo, args);
      }, this);
    },

    /**
     * Maps a given function to every foo in the store. The given function is called once for
     * every object in the store, with the object being the only argument.
     * @param {Function.<Object>} f - The function to call.
     * @param {Object} [scope] - The object that <code>this</code> will refer to.
     */
    mapFunction: function (f, scope) {
      scope = scope || this;
      Object.keys(this._foos).forEach(function (id) {
        var foo = this.get(id);
        f.bind(scope)(foo)
      }, this);
    }

  });

  return FooStore;
});
