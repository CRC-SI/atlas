define([
  'atlas/util/Class'
], function (Class) {

  /**
   * Define the FooStore constructor as type atlas.core.FooStore
   * @typedef atlas.core.FooStore
   * @ignore
   */
  var FooStore;

  /**
   * @classdesc The FooStore is a class to encapsulate storing and retrieving arbitrary
   * objects using unique IDs. The unique IDs need to be generated by the objects being
   * stored.
   * @param {String} id - The name of the getter function for the objects ID. Defaults
   * to <code>getId</code>.
   * @class atlas.core.FooStore
   */
  FooStore = Class.extend( /** @lends atlas.core.FooStore# */ {

    /**
     * The getter function for the ID of the stored objects.
     * @type {String}
     */
    _getter: null,

    /**
     * The objects stored in the FooStore.
     * @type {Object.<String, Object>}
     * @private
     */
    _foos: null,

    _init: function (getter) {
      this._foos = {};
      this._getter = getter || 'getId';
    },

    // -------------------------------------------------
    // STORE MANAGEMENT
    // -------------------------------------------------

    /**
     * Add an object to the store.
     * @param {Object} obj - The object to add.
     */
    add: function (obj) {
      var id = obj[this._getter].apply(obj);
      this._foos[id] = obj;
    },

    /**
     * Remove an object from the store.
     * @param {String} id - The ID of the object to remove.
     * @returns {Object} The removed object.
     */
    remove: function (id) {
      var obj = this._foos[id];
      delete this._foos[id];
      return obj;
    },

    /**
     * @param {String} id - The ID of the object to retrieve.
     * @returns {Object|Null} The object with the given ID.
     */
    get: function (id) {
      return this._foos[id];
    },

    /**
     * Removes all items from the store.
     */
    purge: function () {
      this._foos = {};
    },

    // -------------------------------------------------
    // FOO MODIFICATION
    // -------------------------------------------------

    /**
     * Maps a given function to every foo in the store.
     * @param {Function} f - Function to apply to the foo.
     * @param {Array} args - An array of arguments for the function.
     */
    map: function (f, args) {
      Object.keys(this._foos).forEach(function (foo) {
        foo[f] && foo[f].apply(foo, args);
      });
    }
  });

  return FooStore;
});
